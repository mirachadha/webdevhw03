{"version":3,"sources":["App.js","game.js","reportWebVitals.js","index.js"],"names":["App","useState","arr","random","numsInArr","newNum","isNumUniq","n","makeSecret","secret","guesses","setGuesses","bullsCows","setBullsCows","text","setText","lives","length","lives_left","displayWarning","warning","window","alert","guess","guessArr","split","slice","uniqueGuesses","forEach","c","includes","push","onlyUniqueValues","onlyNumbers","i","concat","arr2","secretStr","guessStr","secretArr","bulls","cows","calcBullsCows","document","getElementById","value","reload","location","className","onClick","type","name","maxLength","id","pattern","onChange","event","vv","target","onKeyPress","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e1a7da7e.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport random from \"lodash/random\";\nimport {\n  lives_left,\n  onlyUniqueValues,\n  onlyNumbers,\n  calcBullsCows\n} from \"./game\";\n\nfunction App() {\n  const [secret] = useState(makeSecret());\n  const [guesses, setGuesses] = useState([]);\n  const [bullsCows, setBullsCows] = useState([]);\n  const [text, setText] = useState(\"\");\n\n  let lives = lives_left(guesses);\n\n  // generates random secret number\n  function makeSecret() {\n    let arr = [];\n    arr[0] = random(1, 9);\n    let numsInArr = 1;\n    while (numsInArr < 4) {\n      let newNum = random(0, 9);\n      let isNumUniq = 1;\n      for (let n of arr) {\n        if (newNum === n) {\n          isNumUniq = 0;\n        }\n      }\n      if (isNumUniq === 1) {\n        arr[numsInArr] = newNum;\n        numsInArr = numsInArr + 1;\n      }\n    }\n    return arr;\n  }\n\n  // sets text to user input\n  function updateText(event) {\n    let vv = event.target.value;\n    setText(vv);\n  }\n\n  // displays warning from guess function\n  function displayWarning(warning) {\n    window.alert(warning);\n  }\n\n  // runs after user presses \"enter\" or hits \"guess\" button\n  function guess() {\n    let guessStr = \"\" + text;\n    let guessArr = guessStr.split(\"\").slice(0, 4);\n\n    // check for duplicates from guessArr\n    let uniqueGuesses = onlyUniqueValues(guessArr);\n\n    // account for errors in input\n    if (guessArr.length < 4) {\n      displayWarning(\"Guess must 4 numbers long.\");\n    } else if (uniqueGuesses.length < 4) {\n      displayWarning(\"Cannot have duplicates in your guess.\");\n    } else if (onlyNumbers(guessArr) === 0) {\n      displayWarning(\"Guess must only contain numbers.\");\n    } else if (guessArr[0] === \"0\") {\n      displayWarning(\"Guess cannot start with 0.\");\n    } else {\n      // input looks good!\n\n      // adds guess to guesses\n      let arr = [];\n      arr[0] = text;\n      setGuesses(guesses.concat(arr));\n\n      // adds bulls and cows calculation to bullsCows\n      let arr2 = [];\n      arr2[0] = calcBullsCows(secret, guessArr);\n      setBullsCows(bullsCows.concat(arr2));\n\n      // clears input box after guess is successfully made\n      document.getElementById(\"input\").value = \"\";\n    }\n  }\n\n  // pressing \"enter\" will call function guess\n  function keyPress(event) {\n    if (event.key === \"Enter\") {\n      guess();\n    }\n  }\n\n  // reloads the window and restarts the game\n  function reload() {\n    window.location.reload();\n  }\n\n  // if the user has won the game...\n  if (bullsCows[bullsCows.length - 1] === \"4B0C\") {\n    return (\n      <div className=\"App\">\n        <h1>You Win!</h1>\n        <p>\n          <button onClick={() => reload()}>Reset</button>\n        </p>\n      </div>\n    );\n  }\n  // if the user has lost the game...\n  else if (lives === 0) {\n    return (\n      <div className=\"App\">\n        <h1>Game Over! The correct answer was {secret}</h1>\n        <p>\n          <button onClick={() => reload()}>Reset</button>\n        </p>\n      </div>\n    );\n  }\n\n  // what the game looks like while in session\n  return (\n    <div className=\"app\">\n      <h3>Lives Left: {lives}</h3>\n      <p>\n        <input\n          type=\"text\"\n          name=\"guess\"\n          maxLength=\"4\"\n          id=\"input\"\n          pattern=\"\\d{4}\"\n          onChange={updateText}\n          onKeyPress={keyPress}\n        />\n        <button onClick={guess}>Guess</button>\n      </p>\n      <table className=\"GuessTable\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Guess</th>\n            <th>B & C</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1</td>\n            <td>{guesses[0]}</td>\n            <td>{bullsCows[0]}</td>\n          </tr>\n          <tr>\n            <td>2</td>\n            <td>{guesses[1]}</td>\n            <td>{bullsCows[1]}</td>\n          </tr>\n          <tr>\n            <td>3</td>\n            <td>{guesses[2]}</td>\n            <td>{bullsCows[2]}</td>\n          </tr>\n          <tr>\n            <td>4</td>\n            <td>{guesses[3]}</td>\n            <td>{bullsCows[3]}</td>\n          </tr>\n          <tr>\n            <td>5</td>\n            <td>{guesses[4]}</td>\n            <td>{bullsCows[4]}</td>\n          </tr>\n          <tr>\n            <td>6</td>\n            <td>{guesses[5]}</td>\n            <td>{bullsCows[5]}</td>\n          </tr>\n          <tr>\n            <td>7</td>\n            <td>{guesses[6]}</td>\n            <td>{bullsCows[6]}</td>\n          </tr>\n          <tr>\n            <td>8</td>\n            <td>{guesses[7]}</td>\n            <td>{bullsCows[7]}</td>\n          </tr>\n        </tbody>\n      </table>\n      <p>\n        <button onClick={() => reload()}>Reset</button>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n\n","// calculates the amount of lives left\nexport function lives_left(guesses) {\n  return 8 - guesses.length;\n}\n\n// returns an array of only unique values from given array\nexport function onlyUniqueValues(guessArr) {\n  let uniqueGuesses = [];\n  guessArr.forEach((c) => {\n    if (!uniqueGuesses.includes(c)) {\n      uniqueGuesses.push(c);\n    }\n  });\n  return uniqueGuesses;\n}\n\n// checks whether a given array contains only numbers\nexport function onlyNumbers(guessArr) {\n  let onlyNumbers = 1;\n  for (let i = 0; i < guessArr.length; i++) {\n    if (!(guessArr[i] >= \"0\" && guessArr[i] <= \"9\")) {\n      onlyNumbers = 0;\n    }\n  }\n  return onlyNumbers;\n}\n\n// calculates the number of bulls and cows in a guess\nexport function calcBullsCows(secret, guess) {\n  // setting up arrays\n  let secretStr = \"\" + secret[0] + secret[1] + secret[2] + secret[3];\n  let guessStr = \"\" + guess[0] + guess[1] + guess[2] + guess[3];\n  let secretArr = secretStr.split(\"\").slice(0, 4);\n  let guessArr = guessStr.split(\"\").slice(0, 4);\n\n  // calculate bulls\n  let bulls = 0;\n  for (let i = 0; i < 4; i++) {\n    if (secretArr[i] === guessArr[i]) {\n      bulls++;\n    }\n  }\n\n  // calculate cows\n  let cows = 0;\n  for (let i = 0; i < 4; i++) {\n    if (secretArr.includes(guessArr[i])) {\n      cows++;\n    }\n  }\n  cows = cows - bulls;\n\n  // return bulls and cows string\n  return \"\" + bulls + \"B\" + cows + \"C\";\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}